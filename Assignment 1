# notes.py - Simple notes application

# modules
import sys
import datetime
import getpass

# ---- HARDCODED DATA STARTS HERE ----
# Usually we would use database but here lists are used to store users
users = ["user1", "user2", "user3"]
passwords = ["pass1", "pass2", "pass3"]

# notes is a list of note dictionary
notes = []

# First test note for first user
note = {
    "userid" : 0,
    "subject" : "sub1",
    "date" : datetime.datetime.now(),
    "text" : "text1"
}

# Add note to the notes list
notes.append(note)

# Second test note for second user
note = {
    "userid" : 1,
    "subject" : "sub2",
    "date" : datetime.datetime.now(),
    "text" : "text2"
}

# Add note to the notes list
notes.append(note)

# Third test note for first user
note = {
    "userid" : 0,
    "subject" : "sub3",
    "date" : datetime.datetime.now(),
    "text" : "text3"
}

# Add note to the notes list
notes.append(note)

# ---- HARDCODED DATA ENDS HERE ----

# authentication function
# returns : userid as an integer
# return value -1 means that user was not found
def authenticate(username, password) -> int:
    # Userid is used after the login to identify user
    userid = 0

    # Loop to authenticate user
    for u in users:
        # TODO: test prints
        # print(u)
        if u == username:
            if password != passwords[userid]:
                print("Invalid password")
                return -1
            else:
                return userid
        userid += 1

    # User was not found.
    print("User was not found.")
    return -1

# create a new note for a specific user
# arguments : userid, subject, date, text
# returns : noteid or -1 if note creation fails
def createnote(userid, subject, date, text) -> int:
    # TODO: Error handling will be added later. 

    #check if user id is negative or greater than users list length
    if userid <0 or userid>=len(users):
        print("Invalid user ID.")
        return -1
    #check if the subject field is empty
    if not subject:
        print("Subject cannot be empty.")
        return -1
    #check if date is of datetime format
    if not isinstance(date,datetime.datetime):
        print("Invalid date format.")
        return -1
    #check if text is empty
    if not text:
        print("Text cannot be empty.")
        return -1
    try:
        # Create a note item
        note = {
            "userid" : userid,
            "subject" : subject,
            "date" : date,
            "text" : text,
        }

        # Add note item to notes list
        notes.append(note)

        return(len(notes) - 1)
    except Exception as e:
        #exception message with error message
        print(f"An error occured during creation of the note: {e}")
        return -1

# list database ids of notes of a user
# arguments : userid
# returns : list of user's notes
def listusernotes(userid) -> list:
    # Create a new empty list that will contain ids and subject of a user notes
    usernotes = []
    # Go through all the notes and populate the new list that contains ids of one user
    for x,note in enumerate(notes):
        if note["userid"] == userid:
            usernotes.append(x)
    # Return the populated list of notes of one user
    return usernotes    
    
    
    

# list note details
# arguments : noteid
# returns : a note item as a dictionary
def notedetails(noteid) -> dict:
    #checking for valid noteid range
    if 0 <= noteid < len(notes):
        #defining note
        note = notes[noteid]
        # get the username using userid from the note
        username = users[note["userid"]]  
        # add username to the note 
        note['username'] = username  
        # TODO: When database is used this function is used to fetch details from there
        # Now we simply return the information from notes list
        return note
    else:
        print(f"Note with ID {noteid} does not exist.")
        return {}

# delete a note
# arguments : noteid
# returns : True is success or False in case of failure
def deletenote(noteid) -> bool:
    # Delete a list item
    del notes[noteid]
    # Return True for now
    return True

#search a note
#arguments: userid to only search through notes of that user, search_term
#returns:search_results

def search(userid,search_term) ->list:
    #empty list to hold search results
    search_results=[]
    #iterates over "notes" using enumerate to get index value "n" and the note "note"
    for n,note in enumerate(notes):
        #checking for mathcing userid and if query text is in the note's "subject" or "text" field
        if note ['userid']==userid and (search_term in note['subject'] or search_term in note['text']):
            search_results.append((n,note))
    return search_results

# main function
def main() -> int:
    # Main loop that will run "forever" - TODO: add exit later
    while (True):
        # userid is set initially to -1. In this app it means that user is not authenticated.
        userid = -1

        # Login loop
        while (userid == -1):
            print("Login please:")
            username = input("Username: ")
            password = getpass.getpass()
            userid = authenticate(username, password)

        # Empty line
        print()

        # Main menu
        onmainmenu = True
        while (onmainmenu):
            print("Main menu:")
            print("1. Create a note")
            print("2. Retrieve notes")
            print("3. Logout")

            choice_menu = input("Choose and press enter: ")

            # Create a new note
            if choice_menu == "1":
                
                # Ask for details
                subject = input("Subject: ")
                text = input("Text: ")

                # Initially result is set to -2
                
                # Create a new note
                result = createnote(userid, subject, datetime.datetime.now(), text)
                # Print the result
                if result != -1:
                    print("New note created: " + str(result))
                else:
                    print("Failed to create a new note")
                    
                    
                

            # List notes of current user and open a new menu to access them
            elif choice_menu == "2":
                print("Retrieve notes options:")
                print("1. List user notes")
                print("2. Search for a note")

                choice = input("Choose an option or enter any other number to exit: ")
                # Request list of notes
                if choice == '1':
                    # List number
                    
                    usernotes = listusernotes(userid)
                    # Fetch subject of each note and show them in menu
                    for note_id in usernotes:
                        note = notedetails(note_id)
                        if note:  # Ensure that note is not empty
                            print(f"{note_id}. {note['subject']}")
                        else:
                            print(f"Note with ID {note_id} does not exist.")
                        
                    # Show details of selected note and show note specific menu
                    selectednote =  input("Enter a number of a note to see details or any other number to exit")
                    #checking if input is empty to skip the rest and go to menu
                    if selectednote.strip() == "":
                        print("Returning to main menu.")
                        continue   
                    try:
                        selectednote = int(selectednote)
                        if selectednote in usernotes:
                            #check if note it empty
                            note = notedetails(selectednote)
                            if note:
                                print("--- --- ---")
                                #displays username
                                print("User: "+note["username"])
                                print("Subject: " + note["subject"])
                                print("Date: " + str(note["date"]))
                                print("Text: " + note["text"])
                                print("--- --- ---")
                                # One new menu loop that is used to delete menu item
                                choice = input("Type \"Delete\" to delete this note or press enter to go back: ")

                                if (choice == "Delete"):
                                    deletenote(usernotes[int(selectednote)])
                                    # Reset choice variable as it is used in other menus
                                    #choice = 0
                                else:
                                    # Reset choice variable as it is used in other menus
                                    #choice = 0
                                    pass
                            else:
                                print("Please enter a valid number.")
                                # Reset choice variable as it is used in other menus
                                #choice = 0

                        else:
                            print("Note with this ID is not found or you dont have access.")
                    except ValueError:
                        print("Returning to menu.")
                        # Rest of the answers will log user out
                elif choice== '2':
                    search_term = input("Enter search term: ")
                    search_results = search(userid, search_term)

                    if search_results:
                        print("Search results:")
                        for note_id, note in search_results:
                            print("--- --- ---")
                            #displays username
                            print(f"Note ID: {note_id}")
                            print("Subject: " + note["subject"])
                            print("Date: " + str(note["date"]))
                            print("Text: " + note["text"])
                            print("--- --- ---")
                    else:
                        print("No notes found with the given search term.")
            else:
                onmainmenu = False
            

# main function entry point
if __name__ == '__main__':
    sys.exit(main())
